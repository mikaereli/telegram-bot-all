from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from config import BOT_TOKEN
from .database import Database

class TelegramBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.db = Database()
        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("add", self.add_command))
        self.application.add_handler(CommandHandler("all", self.all_command))
        self.application.add_handler(CommandHandler("remove", self.remove_command))
        self.application.add_handler(CommandHandler("list", self.list_command))

    async def add_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add @user1 @user2 @user3
        """
        if not update.effective_chat.type in ['group', 'supergroup']:
            await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        if not context.args:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ username'—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
                "–ü—Ä–∏–º–µ—Ä: /add @user1 @user2 @user3"
            )
            return

        chat_id = update.effective_chat.id
        chat_name = update.effective_chat.title

        self.db.add_group(chat_id, chat_name)

        added, failed = self.db.add_members(chat_id, context.args)

        response = [f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {added}"]
        if failed:
            response.append(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å: {', '.join(failed)}")

        await update.message.reply_text("\n".join(response))

    async def all_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã"""
        if not update.effective_chat.type in ['group', 'supergroup']:
            await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        try:
            chat_id = update.effective_chat.id
            sender_username = update.effective_user.username

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã
            members = self.db.get_group_members(chat_id)

            # –ò—Å–∫–ª—é—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            if sender_username:
                members_to_mention = members - {sender_username}
            else:
                members_to_mention = members

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if members_to_mention:
                mentions = " ".join(f"@{username}" for username in sorted(members_to_mention))
                message = f"üîî {mentions}"
            else:
                message = "‚ùå –í –±–∞–∑–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è"

            await update.message.reply_text(message)

        except Exception as e:
            print(f"Error in all_command: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    async def remove_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove @username
        """
        if not update.effective_chat.type in ['group', 'supergroup']:
            await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        if not context.args:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ username —É—á–∞—Å—Ç–Ω–∏–∫–∞.\n"
                "–ü—Ä–∏–º–µ—Ä: /remove @username"
            )
            return

        username = context.args[0]
        chat_id = update.effective_chat.id

        if self.db.remove_member(chat_id, username):
            await update.message.reply_text(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {username} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã")
        else:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ {username}")

    async def list_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ"""
        if not update.effective_chat.type in ['group', 'supergroup']:
            await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        chat_id = update.effective_chat.id
        members = self.db.get_group_members(chat_id)

        if members:
            member_list = "\n".join(f"@{username}" for username in sorted(members))
            await update.message.reply_text(
                f"üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ ({len(members)}):\n{member_list}"
            )
        else:
            await update.message.reply_text("üìã –í –±–∞–∑–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/add @user1 @user2 - –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            "/remove @user - —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
            "/all - –æ—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            "/list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
        )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("Bot starting...")
        self.application.run_polling()